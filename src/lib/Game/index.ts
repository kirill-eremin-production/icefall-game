import { writable, get, type Writable } from "svelte/store";

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π Svelte-store –∏–≥—Ä—ã: —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–∏–∫–ª–∞–º–∏,
// —Ä–µ–∂–∏–º–æ–º –ø–æ—Å—Ç—Ä–æ–π–∫–∏, –∂—É—Ä–Ω–∞–ª–æ–º —Å–æ–±—ã—Ç–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–±–µ–¥—ã.
// –õ–æ–≥–∏–∫—É –∏ –¥–∞–Ω–Ω—ã–µ –≤—ã–Ω–µ—Å–µ–Ω—ã –ø–æ –º–æ–¥—É–ª—è–º –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏/—Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏.
import type {
  GameState,
  GameSettings,
  BuildingKey,
  DifficultyCost,
} from "./types";
import { BUILDINGS, ICONS, COST_SCALE, TIME_PRESETS } from "./constants";
import { format, formatTimeSecToMMSS } from "./utils";
import { generateMissions, missionDone } from "./missions";
import { currentCost, canAfford, spend, addRates } from "./economy";
import { emptyOccupied, findFreeCell, placeBuildingAt } from "./map";

// –†–µ—ç–∫—Å–ø–æ—Ä—Ç –ø—É–±–ª–∏—á–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç/–∫–æ–Ω—Å—Ç–∞–Ω—Ç/—Ç–∏–ø–æ–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –∏–∑ gameStore.
export { BUILDINGS, ICONS, COST_SCALE, TIME_PRESETS } from "./constants";
export { format, formatTimeSecToMMSS } from "./utils";
export type { GameState, GameSettings, BuildingKey } from "./types";

// =============== Initial State ===============

/**
 * –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã.
 * –ó–¥–µ—Å—å –∑–∞–¥–∞—é—Ç—Å—è —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã, –∫–∞—Ä—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä.
 */
function initialState(): GameState {
  return {
    started: false,
    paused: false,
    won: false,
    timeLeft: 240,
    timeSpeed: 1,
    multiplier: 1.25,
    resources: { wood: 50, stone: 50, food: 30, gold: 0, pop: 3 },
    rates: { wood: 0, stone: 0, food: 0, gold: 0, pop: 0 },
    counts: {
      house: 0,
      lumberMill: 0,
      quarry: 0,
      farm: 0,
      goldMine: 0,
      townHall: 0,
    },
    settings: { cost: "medium", time: "medium", missions: "medium" },
    map: { w: 12, h: 12, occupied: emptyOccupied(12, 12) },
    built: [],
    placement: { active: false, buildKey: null },
    missions: [],
    log: [],
    loops: { tick: null, timer: null },
  };
}

// =============== Store ===============

/**
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥, —Å–æ–∑–¥–∞—é—â–∏–π API –∏–≥—Ä—ã –∏ –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É—é—â–∏–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ª–æ–≥–∏–∫—É.
 * –í–Ω–µ—à–Ω–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞–±–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏ subscribe().
 */
function createGameStore() {
  const store: Writable<GameState> = writable(initialState());

  // =============== –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã —Å—Ç–æ—Ä–∞ ===============

  function log(message: string) {
    store.update((s) => {
      s.log.unshift(message);
      return s;
    });
  }

  function applySettings() {
    store.update((s) => {
      s.timeLeft = TIME_PRESETS[s.settings.time] || 240;
      s.missions = generateMissions(s.settings.missions);
      return s;
    });
  }

  function setSetting<K extends keyof GameSettings>(
    key: K,
    value: GameSettings[K]
  ) {
    store.update((s) => {
      s.settings[key] = value as any;
      return s;
    });
  }

  function getCostLabel(cost: DifficultyCost) {
    return cost === "cheap"
      ? "–¥–µ—à—ë–≤—ã–µ"
      : cost === "expensive"
      ? "–¥–æ—Ä–æ–≥–∏–µ"
      : "—Å—Ä–µ–¥–Ω–∏–µ";
  }

  function previewStartInfo(): string {
    const s = get(store);
    const t = TIME_PRESETS[s.settings.time] || 240;
    const count = generateMissions(s.settings.missions).length;
    const costLabel = getCostLabel(s.settings.cost);
    return `–í—Ä–µ–º—è: ${formatTimeSecToMMSS(
      t
    )}, —Ü–µ–Ω—ã: ${costLabel}, –∑–∞–¥–∞–Ω–∏–π: ${count}.`;
  }

  function refreshMissionFlags() {
    store.update((s) => {
      for (const m of s.missions) {
        const now = missionDone(m, s);
        if (now !== !!m.done) {
          m.done = now;
          if (now) log("–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: " + m.text);
        }
      }
      return s;
    });
  }

  function allMissionsDone(s: GameState) {
    return s.missions.length > 0 && s.missions.every((m) => missionDone(m, s));
  }

  function checkWin() {
    store.update((s) => {
      if (!s.won && allMissionsDone(s)) {
        s.won = true;
        stopLoops();
        log("–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –†–∞—Ç—É—à–∞ –≤–æ–∑–≤–µ–¥–µ–Ω–∞, –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã.");
      }
      return s;
    });
  }

  // =============== –ò–≥—Ä–æ–≤—ã–µ —Ü–∏–∫–ª—ã (—Ä–µ—Å—É—Ä—Å—ã –∏ —Ç–∞–π–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏) ===============

  function startLoops() {
    stopLoops();
    store.update((s) => {
      s.loops.tick = setInterval(() => {
        const st = get(store);
        if (st.paused || st.won || !st.started) return;
        const sp = st.timeSpeed || 1;

        // –ü—Ä–∏—Ä–æ—Å—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É —Å —É—á—ë—Ç–æ–º —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        store.update((u) => {
          u.resources.wood += u.rates.wood * sp;
          u.resources.stone += u.rates.stone * sp;
          u.resources.food += u.rates.food * sp;
          u.resources.gold += u.rates.gold * sp;
          u.resources.pop += u.rates.pop * sp;
          return u;
        });

        refreshMissionFlags();
        checkWin();
      }, 1000);

      s.loops.timer = setInterval(() => {
        const st = get(store);
        if (st.paused || st.won || !st.started) return;
        s.timeLeft -= st.timeSpeed || 1;
        if (s.timeLeft <= 0) {
          s.timeLeft = 0;
          stopLoops();
          if (!s.won) {
            log("–ü–æ—Ä–∞–∂–µ–Ω–∏–µ: –≤—Ä–µ–º—è –≤—ã—à–ª–æ.");
          }
        }
      }, 1000);
      return s;
    });
  }

  function stopLoops() {
    store.update((s) => {
      if (s.loops.tick) clearInterval(s.loops.tick);
      if (s.loops.timer) clearInterval(s.loops.timer);
      s.loops.tick = null;
      s.loops.timer = null;
      return s;
    });
  }

  // =============== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º ===============

  function pause() {
    store.update((s) => {
      s.paused = true;
      return s;
    });
  }
  function resume() {
    store.update((s) => {
      s.paused = false;
      return s;
    });
  }

  function setSpeed(mult: 1 | 2 | 3) {
    store.update((s) => {
      s.timeSpeed = mult;
      return s;
    });
  }

  function startGame() {
    store.update((s) => {
      if (s.started) return s;
      // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –≤—Ä–µ–º–µ–Ω–∏/–Ω–∞–±–æ—Ä–∞–º –º–∏—Å—Å–∏–π
      s.timeLeft = TIME_PRESETS[s.settings.time] || 240;
      s.missions = generateMissions(s.settings.missions);
      s.started = true;
      return s;
    });
    const s = get(store);
    const tasksCount = s.missions.length;
    const timeText = formatTimeSecToMMSS(s.timeLeft);
    const costLabel = getCostLabel(s.settings.cost);
    log(
      `–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –≤—Ä–µ–º—è ${timeText}, —Ü–µ–Ω—ã ${costLabel}, –∑–∞–¥–∞–Ω–∏–π ${tasksCount}.`
    );
    startLoops();
  }

  function restart() {
    stopLoops();
    store.set(initialState());
    applySettings();
  }

  // =============== –†–µ–∂–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–¥–∞–Ω–∏–π ===============

  function enterPlacementMode(buildKey: BuildingKey) {
    store.update((s) => {
      const def = BUILDINGS[buildKey];
      if (def.single && s.counts[buildKey] >= 1) {
        log(def.name + ": —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ.");
        return s;
      }
      const free = findFreeCell(s);
      if (!free) {
        log("–ù–∞ –∫–∞—Ä—Ç–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫.");
        return s;
      }
      s.placement.prevPaused = !!s.paused;
      s.placement.active = true;
      s.placement.buildKey = buildKey;
      s.paused = true;
      log(
        "–ò–≥—Ä–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É. –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞: " +
          def.name +
          ". –ù–∞–∂–º–∏—Ç–µ Esc, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å."
      );
      return s;
    });
  }

  function leavePlacementMode() {
    store.update((s) => {
      s.placement.active = false;
      s.placement.buildKey = null;
      const prev = s.placement.prevPaused;
      if (typeof prev !== "undefined") {
        s.paused = !!prev;
        delete s.placement.prevPaused;
      } else {
        s.paused = false;
      }
      return s;
    });
  }

  function tryPlaceAt(x: number, y: number) {
    const s = get(store);
    if (!s.started || !s.placement.active) return;
    if (s.map.occupied[y][x]) {
      log("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞.");
      return;
    }
    const buildKey = s.placement.buildKey!;
    const def = BUILDINGS[buildKey];
    const cost = currentCost(s, buildKey);
    if (!canAfford(s, cost)) {
      log("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è: " + def.name);
      return;
    }

    store.update((u) => {
      spend(u, cost);
      u.counts[buildKey] += 1;
      addRates(u, def.resource, def.baseRate);
      if (def.fixedPopGain) {
        u.resources.pop = (u.resources.pop || 0) + def.fixedPopGain;
      }
      placeBuildingAt(u, buildKey, x, y);
      return u;
    });

    // –ñ—É—Ä–Ω–∞–ª–∏—Ä—É–µ–º –∑–∞—Ç—Ä–∞—Ç—ã –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–∏–¥–µ
    const parts: string[] = [];
    if (cost.wood) parts.push("üå≤ " + cost.wood);
    if (cost.stone) parts.push("ü™® " + cost.stone);
    if (cost.food) parts.push("üçñ " + cost.food);
    if (cost.gold) parts.push("ü™ô " + cost.gold);
    if (cost.pop) parts.push("üë• " + cost.pop);
    log(
      "–ü–æ—Å—Ç—Ä–æ–µ–Ω–æ: " +
        def.name +
        (parts.length ? " (—Å—Ç–æ–∏–º–æ—Å—Ç—å: " + parts.join(", ") + ")" : "")
    );
    if (def.fixedPopGain) log("–ù–∞—Å–µ–ª–µ–Ω–∏–µ —É–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ +" + def.fixedPopGain);

    const prevPaused = get(store).placement.prevPaused;
    leavePlacementMode();
    if (typeof prevPaused !== "undefined" && !prevPaused) {
      const st = get(store);
      if (!st.won && !st.loops.tick) startLoops();
      resume();
    }
    refreshMissionFlags();
    checkWin();
  }

  // –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–∫—Å–∏-–º–µ—Ç–æ–¥—ã –¥–ª—è UI
  function build(key: BuildingKey) {
    const s = get(store);
    if (!s.started) return;
    enterPlacementMode(key);
  }

  function onTileClick(x: number, y: number) {
    const s = get(store);
    if (!s.started) return;
    if (!s.placement.active) return;
    tryPlaceAt(x, y);
  }

  function isTileSelectable(x: number, y: number): boolean {
    const s = get(store);
    return !!(s.placement.active && !s.map.occupied[y][x]);
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ —Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è UI
  function getCurrentCostFor(key: BuildingKey) {
    return currentCost(get(store), key);
  }

  // –ß–∏—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≤—ã—á–∏—Å–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  function canBuildNowState(s: GameState, key: BuildingKey): boolean {
    const def = BUILDINGS[key];
    if (def.single && s.counts[key] >= 1) return false;
    return s.started && canAfford(s, currentCost(s, key));
  }

  function canBuildNow(key: BuildingKey): boolean {
    return canBuildNowState(get(store), key);
  }

  // –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ (Esc) –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –∫–ª–µ—Ç–∫–∏ (–µ—Å–ª–∏ UI –∑–∞—Ö–æ—á–µ—Ç —ç—Ç–æ –ø–æ–≤–µ—Å–∏—Ç—å)
  function cancelPlacement() {
    if (get(store).placement.active) {
      leavePlacementMode();
      log("–í—ã–±–æ—Ä –∫–ª–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ë–Ω.");
    }
  }

  // –ü—É–±–ª–∏—á–Ω–æ–µ API
  const api = {
    subscribe: store.subscribe,
    // lifecycle
    startGame,
    restart,
    pause,
    resume,
    setSpeed,
    // settings
    setSetting,
    applySettings,
    previewStartInfo,
    // build/placement
    build,
    enterPlacementMode,
    leavePlacementMode,
    onTileClick,
    tryPlaceAt,
    cancelPlacement,
    isTileSelectable,
    // helpers
    getCurrentCostFor,
    canBuildNowState,
    canBuildNow,
    log,
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏—Å—Å–∏–∏/–≤—Ä–µ–º—è –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
  applySettings();

  return api;
}

export const game = createGameStore();
